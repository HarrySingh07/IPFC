{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Arial-BoldMT;\f2\froman\fcharset0 Times-Bold;
\f3\fswiss\fcharset0 ArialMT;\f4\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red24\green112\blue43;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c9412\c50196\c21961;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid2\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\
class IPFSService \{\
    \
    private let baseURL = "https://ipfs.infura.io:5001/api/v0"\
    \
    // Upload data to IPFS\
    func upload(data: Data, completion: @escaping (Result<String, Error>) -> Void) \{\
        let url = "\\(baseURL)/add"\
        \
        AF.upload(multipartFormData: \{ multipartFormData in\
            multipartFormData.append(data, withName: "file", fileName: "file", mimeType: "application/octet-stream")\
        \}, to: url).responseJSON \{ response in\
            switch response.result \{\
            case .success(let value):\
                if let json = value as? [String: Any], let hash = json["Hash"] as? String \{\
                    completion(.success(hash))\
                \} else \{\
                    let error = NSError(domain: "IPFSService", code: -1, userInfo: [NSLocalizedDescriptionKey: "Invalid response from IPFS"])\
                    completion(.failure(error))\
                \}\
            case .failure(let error):\
                completion(.failure(error))\
            \}\
        \}\
    \}\
    \
    // Retrieve data from IPFS\
    func retrieve(hash: String, completion: @escaping (Result<Data, Error>) -> Void) \{\
        let url = "https://ipfs.io/ipfs/\\(hash)"\
        \
        AF.request(url).responseData \{ response in\
            switch response.result \{\
            case .success(let data):\
                completion(.success(data))\
            case .failure(let error):\
                completion(.failure(error))\
            \}\
        \}\
    \}\
\}\
\
\
\
\
\
\
\
\
\
class IPFSViewController: UIViewController \{\
    \
    let ipfsService = IPFSService()\
    var dataToUpload: Data?\
    \
    convenience init(data: Data) \{\
        self.init()\
        self.dataToUpload = data\
    \}\
    \
    override func viewDidLoad() \{\
        super.viewDidLoad()\
        \
        guard let data = dataToUpload else \{\
            print("No data to upload")\
            return\
        \}\
        \
        uploadToIPFS(data: data)\
    \}\
    \
    func uploadToIPFS(data: Data) \{\
        ipfsService.upload(data: data) \{ result in\
            switch result \{\
            case .success(let hash):\
                print("Successfully uploaded to IPFS with hash: \\(hash)")\
                self.retrieveFromIPFS(hash: hash)\
            case .failure(let error):\
                print("Failed to upload to IPFS: \\(error)")\
            \}\
        \}\
    \}\
    \
    func retrieveFromIPFS(hash: String) \{\
        ipfsService.retrieve(hash: hash) \{ result in\
            switch result \{\
            case .success(let data):\
                if let content = String(data: data, encoding: .utf8) \{\
                    print("Retrieved content from IPFS: \\(content)")\
                \}\
            case .failure(let error):\
                print("Failed to retrieve from IPFS: \\(error)")\
            \}\
        \}\
    \}\
\}\
\
\
\
\
\pard\pardeftab720\sa106\partightenfactor0

\f1\b\fs34\fsmilli17333 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Explanation
\f2\fs28 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f1\fs29\fsmilli14667 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 IPFSService.swift
\f3\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The 
\f4 \cf3 \strokec3 IPFSService
\f3 \cf0 \strokec2  class provides methods to upload data to IPFS and retrieve data from IPFS using the Infura gateway.\
\ls1\ilvl1
\f4 \cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 upload(data:completion:)
\f3 \cf0 \strokec2 : Uploads data to IPFS and returns the hash.\
\ls1\ilvl1
\f4 \cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 retrieve(hash:completion:)
\f3 \cf0 \strokec2 : Retrieves data from IPFS using the hash.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f1\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 IPFSViewController.swift
\f3\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Demonstrates how to use the 
\f4 \cf3 \strokec3 IPFSService
\f3 \cf0 \strokec2  to upload a simple string to IPFS and then retrieve it.\
\ls1\ilvl1
\f4 \cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 uploadToIPFS(data:)
\f3 \cf0 \strokec2 : Uploads data to IPFS and prints the hash.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sa320\partightenfactor0
\ls1\ilvl1
\f4 \cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 retrieveFromIPFS(hash:)
\f3 \cf0 \strokec2 : Retrieves data from IPFS using the hash and prints the content.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\
\
\
\
\
\
\
}